# Generated by Django 5.2.3 on 2024-01-01 12:00:00

from django.db import migrations, models
import django.db.models.deletion
import django.core.validators
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('analytics', '0001_initial'),
        ('marketplace', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='NFTTrait',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trait_type', models.CharField(help_text='Trait category (e.g., Background, Eyes)', max_length=100)),
                ('trait_value', models.CharField(help_text='Trait value (e.g., Blue, Laser Eyes)', max_length=255)),
                ('rarity_score', models.FloatField(blank=True, help_text='Rarity score for this specific trait (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('frequency', models.IntegerField(default=0, help_text='Number of NFTs with this trait in the collection')),
                ('frequency_percentage', models.FloatField(default=0.0, help_text='Percentage of collection with this trait', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('nft', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='traits', to='marketplace.nft')),
            ],
            options={
                'unique_together': {('nft', 'trait_type', 'trait_value')},
            },
        ),
        migrations.CreateModel(
            name='NFTRarityScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_rarity_score', models.FloatField(help_text='Overall rarity score (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('rarity_rank', models.IntegerField(help_text='Rank within collection (1 = rarest)')),
                ('percentile', models.FloatField(help_text='Percentile rank (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('trait_count', models.IntegerField(default=0, help_text='Number of traits')),
                ('unique_trait_count', models.IntegerField(default=0, help_text='Number of unique traits')),
                ('average_trait_rarity', models.FloatField(default=0.0, help_text='Average rarity of all traits')),
                ('calculation_method', models.CharField(default='statistical', help_text='Method used for rarity calculation', max_length=50)),
                ('last_calculated', models.DateTimeField(auto_now=True)),
                ('calculation_duration', models.FloatField(blank=True, help_text='Time taken for calculation in seconds', null=True)),
                ('raw_trait_data', models.JSONField(default=dict, help_text='Raw trait data used for calculation')),
                ('calculation_metadata', models.JSONField(default=dict, help_text='Additional calculation metadata')),
                ('nft', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rarity_score', to='marketplace.nft')),
            ],
        ),
        migrations.CreateModel(
            name='CollectionRarityMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_nfts', models.IntegerField(default=0, help_text='Total NFTs in collection')),
                ('nfts_with_traits', models.IntegerField(default=0, help_text='NFTs with trait data')),
                ('total_traits', models.IntegerField(default=0, help_text='Total unique traits')),
                ('trait_categories', models.IntegerField(default=0, help_text='Number of trait categories')),
                ('average_rarity_score', models.FloatField(default=0.0, help_text='Average rarity score')),
                ('median_rarity_score', models.FloatField(default=0.0, help_text='Median rarity score')),
                ('rarity_std_deviation', models.FloatField(default=0.0, help_text='Standard deviation of rarity scores')),
                ('rare_holders_count', models.IntegerField(default=0, help_text='Number of holders with rare NFTs')),
                ('diamond_hands_threshold', models.FloatField(default=90.0, help_text='Rarity threshold for diamond hands')),
                ('rarity_price_correlation', models.FloatField(blank=True, help_text='Correlation between rarity and price', null=True)),
                ('price_rarity_regression', models.JSONField(default=dict, help_text='Regression coefficients')),
                ('last_analyzed', models.DateTimeField(auto_now=True)),
                ('analysis_duration', models.FloatField(blank=True, help_text='Time taken for analysis in seconds', null=True)),
                ('analysis_status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text='Error message if analysis failed')),
                ('collection', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rarity_metrics', to='marketplace.collection')),
            ],
        ),
        migrations.CreateModel(
            name='RarityAnalysisJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('job_type', models.CharField(choices=[('initial', 'Initial Analysis'), ('refresh', 'Refresh Analysis'), ('incremental', 'Incremental Update')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.FloatField(blank=True, help_text='Duration in seconds', null=True)),
                ('nfts_processed', models.IntegerField(default=0)),
                ('nfts_with_scores', models.IntegerField(default=0)),
                ('errors_count', models.IntegerField(default=0)),
                ('error_details', models.JSONField(default=dict, help_text='Detailed error information')),
                ('calculation_method', models.CharField(default='statistical', max_length=50)),
                ('force_refresh', models.BooleanField(default=False)),
                ('batch_size', models.IntegerField(default=100)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rarity_jobs', to='marketplace.collection')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='nfttrait',
            index=models.Index(fields=['nft', 'trait_type'], name='analytics_n_nft_id_123456_idx'),
        ),
        migrations.AddIndex(
            model_name='nfttrait',
            index=models.Index(fields=['trait_type', 'trait_value'], name='analytics_n_trait_t_123456_idx'),
        ),
        migrations.AddIndex(
            model_name='nfttrait',
            index=models.Index(fields=['rarity_score'], name='analytics_n_rarity_123456_idx'),
        ),
        migrations.AddIndex(
            model_name='nftrarityscore',
            index=models.Index(fields=['nft', 'total_rarity_score'], name='analytics_n_nft_id_123456_idx'),
        ),
        migrations.AddIndex(
            model_name='nftrarityscore',
            index=models.Index(fields=['rarity_rank'], name='analytics_n_rarity_123456_idx'),
        ),
        migrations.AddIndex(
            model_name='nftrarityscore',
            index=models.Index(fields=['collection', 'total_rarity_score'], name='analytics_n_collect_123456_idx'),
        ),
        migrations.AddIndex(
            model_name='nftrarityscore',
            index=models.Index(fields=['last_calculated'], name='analytics_n_last_ca_123456_idx'),
        ),
        migrations.AddIndex(
            model_name='collectionraritymetrics',
            index=models.Index(fields=['collection', 'last_analyzed'], name='analytics_c_collect_123456_idx'),
        ),
        migrations.AddIndex(
            model_name='collectionraritymetrics',
            index=models.Index(fields=['analysis_status'], name='analytics_c_analysi_123456_idx'),
        ),
        migrations.AddIndex(
            model_name='rarityanalysisjob',
            index=models.Index(fields=['collection', 'status'], name='analytics_r_collect_123456_idx'),
        ),
        migrations.AddIndex(
            model_name='rarityanalysisjob',
            index=models.Index(fields=['created_at'], name='analytics_r_created_123456_idx'),
        ),
        migrations.AddIndex(
            model_name='rarityanalysisjob',
            index=models.Index(fields=['status', 'created_at'], name='analytics_r_status_123456_idx'),
        ),
    ] 